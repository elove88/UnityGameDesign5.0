using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;


/// <summary>ゲーム内イベント管理クラス</summary>
class EventManager : MonoBehaviour
{
	//==============================================================================================
	// MonoBehaviour 関連のメソッド・メンバ変数

	/// <summary>ゲーム開始時に読み込むスクリプトのファイル名</summary>
	public string m_firstScriptFile = "events.txt";

	public enum STEP {

		NONE = -1,

		LOAD_SCRIPT = 0,			//!< スクリプトファイルをロードする(load コマンド).

		WAIT_TRIGGER,				//!< イベント発動待ち.
		EXECUTE_EVENT,				//!< イベント実行.

		NUM,
	};

	private	STEP	m_step     = STEP.NONE;
	private STEP	m_nextStep = STEP.NONE;

	private	Event	m_activeEvent = null;
	private	int		m_activeEventIndex = -1;

	/// <summary>イベント終了後に続けて評価するイベント（evaluate-event コマンド）</summary>
	private int		m_nextEvaluatingEventIndex = -1;

	private string[] m_nextScriptFiles = null;

	/// <summary>スタートアップメソッド</summary>
	private void Start()
	{
		this.m_soundManager = GameObject.Find("SoundManager").GetComponent<SoundManager>();

		this.GetComponent<FadeInOutManager>().fadeIn(0.0f);

		// -------------------------------------------- //
		// テスト用のイベントをイベントを作成する.

		// 登場キャラクター.
		string[]	targets = { "Hero", "Elder" };

		// コマンド.
		string[][]	actions = { 
			new string[] { "text", 		"イベントのテスト" },
			new string[] { "dialog", 	"Hero",	"こんにちは" },
		 };

		// イベントを作る.
		this.m_activeEvent = new Event(targets, null, actions, false, false, "test-event");

		// イベントの実行を開始する.
		this.m_activeEvent.start();

		this.m_isExecuting = true;
	}

	void	Update()
	{
		// イベントを最後まで実行する.
		if(!this.m_activeEvent.isDone()) {

			// イベントの実行.
			this.m_activeEvent.execute(this);

		} else {

			// イベントの実行が終わったら、テキストをクリアーする.
			this.GetComponent<TextManager>().hide();
			this.m_isExecuting = false;
		}
	}

	//==============================================================================================
	// 公開メソッド

	public Event	getActiveEvent()
	{
		return(this.m_activeEvent);
	}

	/// <summary>イベントのインデックスを取得する</summary>
	public int getEventIndexByName( string eventName )
	{
		return Array.FindIndex( m_events, x => x.getEventName() == eventName );
	}

	/// <summary>イベント終了後に続けて評価するイベントのインデックスを設定する (evaluate-event)</summary>
	public void setNextEvaluatingEventIndex( int eventIndex )
	{
		m_nextEvaluatingEventIndex = eventIndex;
	}

	/// <summary>次に読み込むスクリプトファイルを設定する</summary>
	public void setNextScriptFiles( string[] fileNames )
	{
		m_nextScriptFiles = fileNames;
	}

	/// <summary>接触オブジェクトを追加する</summary>
	/// <param name="gameObject">接触オブジェクト</param>
	public void addContactingObject( BaseObject baseObject )
	{
		string name = baseObject.name;
		if ( !m_contactingObjects.Contains( name ) )
		{
			m_contactingObjects.Add( name );
		}
	}

	/// <summary>イベントの実行中かどうかを返す</summary>
	/// <returns>イベントの実行中かどうか</returns>
	public bool isExecutingEvents()
	{
		return m_isExecuting;
	}

	/// <summary>イベントのインデックスを取得する</summary>
	/// <param name="eventName">イベントの名前</param>
	/// <returns>イベントのインデックス</returns>
	public int	GetEventIndexByName(string eventName)
	{
		int		index = Array.FindIndex(this.m_events, x => x.getEventName() == eventName);

		return(index);
	}

	/// <summary>イベントを強引に開始する (call-event)</summary>
	public void startEvent( int eventIndex )
	{
		m_activeEvent      = m_events[ eventIndex ];
		m_activeEventIndex = eventIndex;
		m_nextStep         = STEP.EXECUTE_EVENT;
	}

	/// <summary>サウンドマネージャーを返す</summary>
	/// <returns>サウンドマネージャー</returns>
	public SoundManager	getSoundManager()
	{
		return(m_soundManager);
	}

	//==============================================================================================
	// 非公開メンバ変数

	/// <summary>イベント作成済みフラグ</summary>
	private bool m_hasCreatedEvents = false;

	/// <summary>イベントの情報を保持するオブジェクト</summary>
	private Event[] m_events = new Event[ 0 ];

	/// <summary>プロローグイベントの評価・実行フラグ</summary>
	private bool m_isPrologue = false;

	/// <summary>接触オブジェクトのリスト</summary>
	private List< string > m_contactingObjects = new List< string >();

	/// <summary>イベントの実行中かどうか</summary>
	private bool m_isExecuting = false;

	/// <summary>サウンドマネージャー</summary>
	private SoundManager	m_soundManager = null;

	/// <summary>フェードインアウトマネージャー</summary>
	private FadeInOutManager	m_fadeInOutManager = null;
}
